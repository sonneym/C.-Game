// Generated by CoffeeScript 1.3.1
(function() {
  var $, Audio, Carnival, Nums,
    _this = this,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $ = this.jQuery || require('jquery');

  (function() {
    var lastTime, vendors, x;
    lastTime = 0;
    vendors = ["ms", "moz", "webkit", "o"];
    x = 0;
    while (x < vendors.length && !window.requestAnimationFrame) {
      window.requestAnimationFrame = window[vendors[x] + "RequestAnimationFrame"];
      window.cancelAnimationFrame = window[vendors[x] + "CancelAnimationFrame"] || window[vendors[x] + "CancelRequestAnimationFrame"];
      ++x;
    }
    if (!window.requestAnimationFrame) {
      window.requestAnimationFrame = function(callback, element) {
        var currTime, id, timeToCall;
        currTime = new Date().getTime();
        timeToCall = Math.max(0, 16 - (currTime - lastTime));
        id = window.setTimeout(function() {
          return callback(currTime + timeToCall);
        }, timeToCall);
        lastTime = currTime + timeToCall;
        return id;
      };
    }
    if (!window.cancelAnimationFrame) {
      return window.cancelAnimationFrame = function(id) {
        return clearTimeout(id);
      };
    }
  })();

  if (!Array.prototype.indexOf) {
    Array.prototype.indexOf = function(elt) {
      var from, len;
      len = this.length;
      from = Number(arguments[1]) || 0;
      from = (from < 0 ? Math.ceil(from) : Math.floor(from));
      if (from < 0) {
        from += len;
      }
      while (from < len) {
        if (from in this && this[from] === elt) {
          return from;
        }
        from++;
      }
      return -1;
    };
  }

  Array.prototype.shuffle = function() {
    return this.sort(function() {
      return 0.5 - Math.random();
    });
  };

  Audio = (function() {

    Audio.name = 'Audio';

    function Audio(options) {
      this.options = options != null ? options : {};
      this.sound = [];
      this.sound['ratchet'] = new buzz.sound("audio/ratchet" + this.audioExt());
      this.sound['ratchet'].load();
    }

    Audio.prototype.audioExt = function() {
      if (buzz.isOGGSupported()) {
        return '.ogg';
      } else {
        return '.m4a';
      }
    };

    Audio.prototype.stop = function() {
      var sound, _i, _len, _ref, _results;
      _ref = this.sound;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        sound = _ref[_i];
        _results.push(sound.stop(true));
      }
      return _results;
    };

    return Audio;

  })();

  Nums = (function() {

    Nums.name = 'Nums';

    Nums.prototype.randomPick = function(i) {
      var shuffled;
      shuffled = this.range[i].shuffle();
      return shuffled.shift();
    };

    function Nums(options) {
      var arr, draw, i, indx, numsInfo, _i, _j, _len, _ref;
      this.options = options != null ? options : {};
      this.picks = [];
      this.range = [];
      arr = [];
      numsInfo = MG.api.getDrawInfo();
      for (indx = _i = 0, _len = numsInfo.length; _i < _len; indx = ++_i) {
        draw = numsInfo[indx];
        this.range[indx] = draw[0].range;
      }
      for (i = _j = 0, _ref = draw[0].chances - 1; 0 <= _ref ? _j <= _ref : _j >= _ref; i = 0 <= _ref ? ++_j : --_j) {
        arr.push({
          pickId: draw[0].pickId,
          seqId: i
        });
      }
      this.picks[indx] = arr;
    }

    return Nums;

  })();

  ({
    getList: function(i) {
      var item, list, _i, _len, _ref;
      list = [];
      _ref = _this.all;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        if (_this.range.indexOf(i) !== -1 && Carnival.alreadySelected(i)) {
          item = i;
        } else {
          item = '';
        }
        list.push({
          item: item
        });
      }
      return list;
    }
  });

  Carnival = (function() {

    Carnival.name = 'Carnival';

    Carnival.prototype.className = 'carnival';

    Carnival.prototype.active = null;

    Carnival.selection = [];

    Carnival.alreadySelected = function(i) {
      return Carnival.selection.indexOf(i.toString()) === -1;
    };

    Carnival.prototype.events = {
      'click #circle': 'spin',
      'click div[id^="ticket"]': 'activateTicket',
      'click #numbers li': 'selectNum'
    };

    Carnival.activeTicket = {};

    Carnival.isFinished = 13;

    Carnival.spinnable = function() {
      var chosen;
      chosen = this.activeTicket.el.find('p:not(".animated")');
      return chosen.length !== 0;
    };

    function Carnival(options) {
      var key, value, _ref;
      this.options = options != null ? options : {};
      this.activate = __bind(this.activate, this);

      this.selectOne = __bind(this.selectOne, this);

      this.updatedPadNumbersTxt = __bind(this.updatedPadNumbersTxt, this);

      this.showPad = __bind(this.showPad, this);

      this.handlePicked = __bind(this.handlePicked, this);

      this.displayAvailable = __bind(this.displayAvailable, this);

      this.selectNum = __bind(this.selectNum, this);

      this.el = $('#gameArea');
      _ref = this.options;
      for (key in _ref) {
        value = _ref[key];
        this[key] = value;
      }
      this.ltIE10 = $.browser.msie && parseInt($.browser.version, 10) < 10 ? true : false;
      this.nums = new Nums;
      this.audio = new Audio;
      this.doneSpinning = true;
      this.delegateEvents(this.events);
      this.guyEl = this.el.find('#guy');
      this.spinEl = this.el.find('#spin');
      this.wheelEl = this.el.find('#wheel');
      this.pointerEl = this.el.find('#pointer');
      this.numbersEl = this.el.find('#numbers li');
      this.guyEl.removeClass().addClass('animated bounceInDown');
      this.classRemover(this.guyEl);
    }

    Carnival.prototype.activateTicket = function(e) {
      var active, el;
      el = $(e.target);
      if (!el.is('div')) {
        el = el.parent();
      }
      if (Carnival.activeTicket.el === el) {
        return;
      }
      active = el.siblings('.active');
      $(active[0]).removeClass('active');
      el.addClass('active');
      Carnival.activeTicket.el = el;
      Carnival.activeTicket.num = el.attr('id').substr(6);
      return this.displayAvailable();
    };

    Carnival.prototype.selectNum = function(e) {
      var element, pickedNum, selectable;
      selectable = Carnival.spinnable();
      if (selectable) {
        element = $(e.target);
        pickedNum = element.attr('class').slice(6);
        return this.handlePicked(pickedNum, element);
      } else {
        return this.notSelectable();
      }
    };

    Carnival.prototype.notSelectable = function() {
      return console.log('cant select');
    };

    Carnival.prototype.displayAvailable = function() {
      var i, listEl, wheelListEl;
      i = Carnival.activeTicket.el.attr('id').slice(6) - 1;
      listEl = this.numbersEl;
      wheelListEl = this.wheelEl.find('li');
      $(wheelListEl).each(function() {
        return $(this).html('');
      });
      listEl.removeClass();
      return this.nums.range[i].forEach(function(num) {
        $(listEl[num - 1]).addClass('choose' + num);
        return $(wheelListEl[num - 1]).html(num);
      });
    };

    Carnival.prototype.spin = function() {
      var i, pickSpin, pickedNum, spin, spinBy, spinOffset, spinWheel, spinnable, startSpin,
        _this = this;
      if (!this.doneSpinning) {
        return;
      }
      spinnable = Carnival.spinnable();
      if (spinnable) {
        this.audio.sound['ratchet'].stop().play();
        this.doneSpinning = false;
        this.pointerEl.addClass('ticker');
        spin = 0;
        pickedNum = this.nums.randomPick(Carnival.activeTicket.num - 1);
        console.log(pickedNum);
        pickSpin = $(".pick" + pickedNum).data('degree');
        spinBy = -pickSpin + 714;
        spinOffset = spin % 360;
        startSpin = 0;
        spin += spinBy;
        i = 30;
        spinWheel = function() {
          var element, frame;
          if (startSpin > spin) {
            _this.rotate(spin);
            cancelAnimationFrame(frame);
            _this.pointerEl.removeClass('ticker');
            _this.doneSpinning = true;
            element = $('.choose' + pickedNum);
            _this.handlePicked(pickedNum, element);
            _this.audio.sound['ratchet'].stop();
            return;
          }
          frame = requestAnimationFrame(spinWheel);
          _this.rotate(startSpin);
          startSpin = startSpin + i;
          i -= 0.8;
          if (i < 5) {
            return i = 5;
          }
        };
      } else {
        this.notSelectable();
      }
      return spinWheel();
    };

    Carnival.prototype.handlePicked = function(num, element) {
      var numEl;
      element.addClass('animated rotateOut');
      numEl = $(Carnival.activeTicket.el.find('p:not(".animated")')[0]);
      numEl.addClass('num' + num);
      numEl.addClass('animated flip');
      if (!--Carnival.isFinished) {
        return console.log('Finished!');
      }
    };

    Carnival.prototype.rotate = function(amount) {
      return this.wheelEl.css({
        transform: "rotate(" + amount + "deg)",
        "-moz-transform": "rotate(" + amount + "deg)",
        "-o-transform": "rotate(" + amount + "deg)",
        "-webkit-transform": "rotate(" + amount + "deg)"
      });
    };

    Carnival.prototype.classRemover = function(el) {
      return window.setTimeout(function() {
        return el.removeClass();
      }, 1300);
    };

    Carnival.prototype.purchase = function() {
      var chosenPlank, chosenValues, i, options, pick, _i, _len, _ref;
      chosenPlank = null;
      options = {};
      this.el.find('div[id ^= "plank"]').each(function() {
        var plankEl;
        plankEl = $(this);
        if (plankEl.hasClass("active")) {
          return chosenPlank = plankEl;
        } else {
          return plankEl.removeClass().addClass('animated bounceOut');
        }
      });
      chosenPlank.removeClass().addClass('animated tada');
      chosenValues = [parseInt(chosenPlank.find('.first').html(), 10), parseInt(chosenPlank.find('.second').html(), 10), parseInt(chosenPlank.find('.third').html(), 10), parseInt(chosenPlank.find('.fourth').html(), 10), parseInt(chosenPlank.find('.fifth').html(), 10)];
      _ref = this.nums.picks;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        pick = _ref[i];
        options.pickId = pick.pickId;
        options.seqId = pick.seqId;
        options.value = chosenValues[i];
        this.setPick(options);
      }
      return Carnival.selection.length = 0;
    };

    Carnival.prototype.generate = function() {
      var _this = this;
      if (this.ltIE10) {
        return this.render();
      } else {
        this.el.find('#plank1, #plank2, #plank3, #plank4').each(function() {
          var plankEl;
          plankEl = $(this);
          return plankEl.removeClass().addClass('animated hinge');
        });
        return window.setTimeout((function() {
          return _this.render();
        }), 1600);
      }
    };

    Carnival.prototype.setPick = function(options) {
      var res;
      res = MG.api.setPick({
        pickId: options.pickId,
        seqId: options.seqId,
        value: options.value
      });
      if (res.returnData.complete) {
        if (this.ltIE10) {
          return MG.api.setGameStatus(MG.api.GameStatus.COMPLETE);
        } else {
          return window.setTimeout((function() {
            return MG.api.setGameStatus(MG.api.GameStatus.COMPLETE);
          }), 1200);
        }
      }
    };

    Carnival.prototype.render = function() {
      var five, i, _i;
      this.reset();
      for (i = _i = 1; _i <= 4; i = ++_i) {
        five = this.nums.fiveRandom();
        this.el.append(this.plankTempl(i, five));
      }
      this.el.append(this.plankTempl('', ''));
      this.purchaseEl = $('<div />').attr('id', 'purchase');
      this.generateEl = $('<div />').attr('id', 'generate');
      this.padEl = $('<div />').attr('id', 'pad');
      this.el.append(this.purchaseEl).append(this.padEl).append(this.generateEl);
      return this;
    };

    Carnival.prototype.reset = function() {
      this.el.empty();
      this.active = null;
      return Carnival.selection.length = 0;
    };

    Carnival.prototype.hidePurchaseEl = function() {
      var buyEl;
      buyEl = this.purchaseEl;
      return buyEl.hide();
    };

    Carnival.prototype.showPurchaseEl = function() {
      var buyEl, wait;
      buyEl = this.purchaseEl;
      buyEl.show().addClass('animated bounceIn');
      return wait = window.setTimeout(function() {
        return buyEl.removeClass();
      }, 1300);
    };

    Carnival.prototype.showPad = function(e) {
      var index;
      this.active = $(e.target);
      index = this.active.data('index');
      this.padEl.html(this.updatedPadNumbersTxt(index));
      this.padEl.css({
        top: this.active.position().top + 174,
        left: this.active.position().left + 374
      });
      return this.padEl.show();
    };

    Carnival.prototype.updatedPadNumbersTxt = function(idx) {
      return $('#numsTemplate').tmpl({
        list: this.nums.getList(idx)
      });
    };

    Carnival.prototype.selectOne = function(e) {
      var selectedNum;
      selectedNum = $(e.target).html();
      this.padEl.hide();
      this.active.html(selectedNum);
      Carnival.selection = this.getSelected();
      if (Carnival.selection.length === 5) {
        return this.showPurchaseEl();
      }
    };

    Carnival.prototype.getSelected = function() {
      Carnival.selection.length = 0;
      this.el.find('#plank a').each(function() {
        var num;
        num = $(this).html();
        if (num !== '?') {
          return Carnival.selection.push(num);
        }
      });
      return Carnival.selection;
    };

    Carnival.prototype.plankTempl = function(i, five) {
      return $('#plankTemplate').tmpl({
        plank: i,
        a: five[0],
        b: five[1],
        c: five[2],
        d: five[3],
        e: five[4]
      });
    };

    Carnival.prototype.activate = function(e) {
      var plankEl;
      plankEl = $(e.target);
      if (e.target.tagName === 'A') {
        plankEl = $(e.target).parent();
      }
      if (this.selected(plankEl)) {
        return;
      }
      this.clearActive();
      plankEl.addClass('active animated pulse');
      if (plankEl.attr('id') === 'plank') {
        if (Carnival.selection.length !== 5) {
          return this.hidePurchaseEl();
        }
      } else {
        return this.showPurchaseEl();
      }
    };

    Carnival.prototype.clearActive = function() {
      return $('div[id ^= "plank"]').each(function() {
        var plankEl;
        plankEl = $(this);
        if (plankEl.hasClass("active")) {
          return plankEl.removeClass();
        }
      });
    };

    Carnival.prototype.selected = function(plankEl) {
      return plankEl.hasClass('active');
    };

    Carnival.prototype.delegateEvents = function(events) {
      var eventName, key, match, method, selector, _results,
        _this = this;
      _results = [];
      for (key in events) {
        method = events[key];
        if (typeof method !== 'function') {
          method = (function(method) {
            return function() {
              _this[method].apply(_this, arguments);
              return true;
            };
          })(method);
        }
        match = key.match(/^(\S+)\s*(.*)$/);
        eventName = match[1];
        selector = match[2];
        if (selector === '') {
          _results.push(this.el.bind(eventName, method));
        } else {
          _results.push(this.el.on(eventName, selector, method));
        }
      }
      return _results;
    };

    return Carnival;

  })();

  this.Carnival = Carnival;

}).call(this);
